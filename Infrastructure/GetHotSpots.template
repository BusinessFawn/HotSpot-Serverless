AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  LambdaBucket:
    Type: String
    Description: The bucket where the lambda code is stored in s3.
    Default: 4tay-lambda-resources
  LambdaLocationKey:
    Type: String
    Description: The key of the zip file where the lambda code is stored in s3.
    Default: lambdas.zip
  HotSpotDynamoDbTableArn:
    Type: String
    Description: The ARN of the DynamoDB table for HotSpot
  HotSpotDynamoDbTableName:
    Type: String
    Description: The name of the DynamoDB table for HotSpot
Resources:
  GetHotSpotsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          !Ref LambdaBucket
        S3Key:
          !Ref LambdaLocationKey
      Description: Get Hot Spots lambda code
      Environment:
        Variables:
          TABLE_NAME: !Ref HotSpotDynamoDbTableName
      Handler: GetHotSpots.get_hot_spots_handler
      MemorySize: 128
      ReservedConcurrentExecutions: 1
      Role:
        !GetAtt GetHotSpotsRole.Arn
      Runtime: python3.6
      Timeout: 10

  GetHotSpotsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: GetHotSpotsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Ref HotSpotDynamoDbTableArn


Outputs:
  RoleArn:
    Description: The arn of my role
    Value:
      !Ref GetHotSpotsRole

  LambdaName:
    Description: The name of my function
    Value:
      !Ref GetHotSpotsLambda

  LambdaArn:
    Description: The arn of my function
    Value:
      !GetAtt GetHotSpotsLambda.Arn
